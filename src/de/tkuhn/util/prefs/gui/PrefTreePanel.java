/*
 * PrefTreePanel.java
 *
 * Created on 14. Mai 2003, 21:33
 * 
 * The MIT License
 *
 * Copyright (C) 2003 
 * Tilmann Kuhn           Gildestr. 34
 * http://www.tkuhn.de    76149 Karlsruhe
 * prefsmeta@tkuhn.de     Germany
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

package de.tkuhn.util.prefs.gui;

import java.util.Collection;
import java.util.prefs.Preferences;

import javax.swing.Action;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.tree.TreeSelectionModel;

import de.tkuhn.swing.actions.ActionUtils;
import de.tkuhn.util.prefs.gui.event.PrefSelectionEvent;
import de.tkuhn.util.prefs.gui.event.PrefSelectionListener;
import de.tkuhn.util.prefs.gui.event.PrefSelectionSupport;

/**
 * A tree panel that renders the preferences node tree holding the preferences
 * to be edited. In the non-basic mode it also provides controls to remove and
 * add nodes.
 * 
 * @author Tilmann Kuhn
 */
public class PrefTreePanel extends JPanel {

	private static final long serialVersionUID = 1L;

	/** Support for propagating PrefSelectionEvents */
	private PrefSelectionSupport prefSelSup = new PrefSelectionSupport();

	/** Model for the tree view */
	private PrefTreeModel treeModel = null;
	/** Preferences root node for the tree view */
	private Preferences root = null;
	/** May Preferences be modified? */
	private boolean modifyMode = false;
	/** Use Resource names for nodes */
	private boolean useResNames = true;

	/** Additional Resource names for nodes */
	// private boolean addResNames = false;

	/** Creates new form PrefTreePanel */
	public PrefTreePanel() {
		initComponents();

		prefTree.getSelectionModel().setSelectionMode(
				TreeSelectionModel.SINGLE_TREE_SELECTION);
	}

	/**
	 * Set the mode this tree is operating in. Supported Modes are those defined
	 * in PrefEditor.
	 * 
	 * @param mode
	 *            the mode to be used.
	 */
	public void setMode(int mode) {

		if (treeModel != null)
			throw new IllegalStateException("Must set mode before root node!");

		switch (mode) {
		// these allow modification
		case PrefEditorPanel.META_ADMIN:
		case PrefEditorPanel.BASIC_ADMIN:
			modifyMode = true;
			break;
		case PrefEditorPanel.BASIC_DEVELOPER:
		case PrefEditorPanel.META_DEVELOPER:
			useResNames = false;
			modifyMode = true;
			break;

		// these don't allow modification
		case PrefEditorPanel.META_DEFAULT:
		case PrefEditorPanel.META_ALLOW_DELETE:
		case PrefEditorPanel.BASIC_DEFAULT:
		case PrefEditorPanel.BASIC_ALLOW_DELETE:
			modifyMode = false;
			break;
		default:
			throw new IllegalArgumentException("No legal mode key given!");
		}
	}

	/**
	 * Set the root of the Preferences tree to be displayed.
	 * 
	 * @param prefs
	 *            the new root node of the tree.
	 */
	public void setRoot(Preferences prefs) {
		if (prefs != root && prefs != null) {

			// Create a new Model if we don't have one.
			if (treeModel == null) {
				treeModel = new PrefTreeModel(prefs, modifyMode);
				prefTree.setCellRenderer(new PrefTreeCellRenderer(useResNames));

				Collection<Action> actions = treeModel.getActions();

				// Register the TreeModels Actions' Keys at the tree.
				ActionUtils.registerAllKeys(prefTree, actions);

				// and the Actions at a Toolbar
				add(ActionUtils.addAll(new JToolBar(), actions),
						java.awt.BorderLayout.SOUTH);

				// Set the model for the tree
				prefTree.setModel(treeModel);
			} else {
				treeModel.setPrefs(prefs);
			}

			root = prefs;

		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		jScrollPane = new javax.swing.JScrollPane();
		prefTree = new javax.swing.JTree();

		setLayout(new java.awt.BorderLayout());

		prefTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
			public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
				prefTreeValueChanged(evt);
			}
		});

		jScrollPane.setViewportView(prefTree);

		add(jScrollPane, java.awt.BorderLayout.CENTER);

	}// GEN-END:initComponents

	private void prefTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {// GEN-FIRST:event_prefTreeValueChanged
		prefSelSup.valueChanged(new PrefSelectionEvent(evt, (Preferences) evt
				.getPath().getLastPathComponent()));
	}// GEN-LAST:event_prefTreeValueChanged

	/**
	 * Adds a PrefSelectionListener to the list of listeners. These are informed
	 * if the selection of Preferences nodes in the tree changes.
	 * 
	 * @param psl
	 *            the PrefSelectionListener to be added
	 */
	public void addPrefSelectionListener(PrefSelectionListener psl) {
		prefSelSup.addPrefSelectionListener(psl);
	}

	/**
	 * Remove a previously registered PrefSelectionListener.
	 * 
	 * @param psl
	 *            the PrefSelectionListener to be released.
	 */
	public void removePrefSelectionListener(PrefSelectionListener psl) {
		prefSelSup.removePrefSelectionListener(psl);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JTree prefTree;
	private javax.swing.JScrollPane jScrollPane;
	// End of variables declaration//GEN-END:variables

}
